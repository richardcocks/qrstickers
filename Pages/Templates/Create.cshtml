@page
@model QRStickers.Pages.Templates.CreateModel
@{
    ViewData["Title"] = "Create New Template";
}

<style>
    .wizard-container {
        max-width: 800px;
        margin: 0 auto;
    }

    .wizard-section {
        background: white;
        padding: 30px;
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .wizard-section h2 {
        margin-top: 0;
        margin-bottom: 20px;
        color: #333;
        font-size: 1.5em;
        border-bottom: 2px solid #1976d2;
        padding-bottom: 10px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        font-weight: 600;
        margin-bottom: 5px;
        color: #555;
    }

    .form-group input[type="text"],
    .form-group input[type="number"],
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

    .form-group textarea {
        resize: vertical;
        min-height: 80px;
    }

    .form-group-inline {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .preset-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    .preset-btn {
        padding: 8px 16px;
        background: #f5f5f5;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .preset-btn:hover {
        background: #e0e0e0;
        border-color: #1976d2;
    }

    .preset-btn.active {
        background: #1976d2;
        color: white;
        border-color: #1976d2;
    }

    .checkbox-group {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .checkbox-group input[type="checkbox"] {
        width: auto;
        cursor: pointer;
    }


    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        padding-top: 20px;
        border-top: 1px solid #eee;
    }

    .help-text {
        font-size: 13px;
        color: #666;
        margin-top: 5px;
    }

    .error-message {
        color: #d32f2f;
        font-size: 13px;
        margin-top: 5px;
    }
</style>

<div class="wizard-container">
    <h1>Create New Template</h1>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <form method="post">
        <!-- Hidden field to preserve clone source during POST -->
        <input type="hidden" asp-for="CloneFromTemplateId" />

        <!-- Template Properties -->
        <div class="wizard-section">
            <h2>Template Properties</h2>

            <div class="form-group">
                <label for="Name">Template Name *</label>
                <input type="text" id="Name" name="Name" asp-for="Name" required maxlength="200" />
                <span asp-validation-for="Name" class="error-message"></span>
            </div>

            <div class="form-group">
                <label for="Description">Description</label>
                <textarea id="Description" name="Description" asp-for="Description" maxlength="1000"></textarea>
                <div class="help-text">Optional description to help identify this template</div>
            </div>

            <div class="form-group">
                <label for="ConnectionId">Connection *</label>
                <select id="ConnectionId" name="ConnectionId" asp-for="ConnectionId" required>
                    <option value="">Select a connection...</option>
                    @foreach (var connection in Model.UserConnections)
                    {
                        <option value="@connection.Id" selected="@(Model.ConnectionId == connection.Id)">
                            @connection.DisplayName
                        </option>
                    }
                </select>
                <span asp-validation-for="ConnectionId" class="error-message"></span>
            </div>

            <div class="form-group">
                <label>Page Size</label>
                <div class="preset-buttons">
                    <button type="button" class="preset-btn" onclick="setPageSize(100, 50)">
                        100×50mm (Rack Mount)
                    </button>
                    <button type="button" class="preset-btn" onclick="setPageSize(60, 60)">
                        60×60mm (Ceiling/Wall)
                    </button>
                    <button type="button" class="preset-btn" onclick="enableCustomSize()">
                        Custom Size
                    </button>
                </div>

                <div class="form-group-inline">
                    <div>
                        <label for="PageWidth">Width (mm) *</label>
                        <input type="number" id="PageWidth" name="PageWidth" asp-for="PageWidth"
                               min="10" max="500" step="0.1" required />
                        <span asp-validation-for="PageWidth" class="error-message"></span>
                    </div>
                    <div>
                        <label for="PageHeight">Height (mm) *</label>
                        <input type="number" id="PageHeight" name="PageHeight" asp-for="PageHeight"
                               min="10" max="500" step="0.1" required />
                        <span asp-validation-for="PageHeight" class="error-message"></span>
                    </div>
                </div>
            </div>

        </div>

        <!-- Form Actions -->
        <div class="wizard-section">
            <div class="form-actions">
                <a href="/Templates" class="btn btn-secondary">Cancel</a>
                <button type="submit" class="btn btn-primary">Create Template</button>
            </div>
        </div>
    </form>
</div>

<script>
    function setPageSize(width, height) {
        document.getElementById('PageWidth').value = width;
        document.getElementById('PageHeight').value = height;
        updatePresetButtons();
    }

    function enableCustomSize() {
        document.getElementById('PageWidth').focus();
        updatePresetButtons();
    }

    function updatePresetButtons() {
        const width = parseFloat(document.getElementById('PageWidth').value);
        const height = parseFloat(document.getElementById('PageHeight').value);
        const buttons = document.querySelectorAll('.preset-btn');

        buttons.forEach(btn => btn.classList.remove('active'));

        if (width === 100 && height === 50) {
            buttons[0].classList.add('active');
        } else if (width === 60 && height === 60) {
            buttons[1].classList.add('active');
        }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        updatePresetButtons();

        // Update page size inputs
        document.getElementById('PageWidth').addEventListener('input', updatePresetButtons);
        document.getElementById('PageHeight').addEventListener('input', updatePresetButtons);
    });
</script>
